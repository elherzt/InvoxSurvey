// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("place");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer")
                        .HasColumnName("survey_id");

                    b.Property<int?>("Time")
                        .HasColumnType("integer")
                        .HasColumnName("time");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_answers");

                    b.HasIndex("PlaceId")
                        .HasDatabaseName("ix_answers_place_id");

                    b.HasIndex("SurveyId")
                        .HasDatabaseName("ix_answers_survey_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_answers_user_id");

                    b.ToTable("answers", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("answer_id");

                    b.Property<string>("Audio")
                        .HasColumnType("text")
                        .HasColumnName("audio");

                    b.Property<int>("OptionId")
                        .HasColumnType("integer")
                        .HasColumnName("option_id");

                    b.Property<string>("Text")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_answer_options");

                    b.HasIndex("AnswerId")
                        .HasDatabaseName("ix_answer_options_answer_id");

                    b.HasIndex("OptionId")
                        .HasDatabaseName("ix_answer_options_option_id");

                    b.ToTable("answer_options", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean")
                        .HasColumnName("is_open");

                    b.Property<int?>("NextQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("next_question_id");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<bool>("SkipSection")
                        .HasColumnType("boolean")
                        .HasColumnName("skip_section");

                    b.HasKey("Id")
                        .HasName("pk_options");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_options_question_id");

                    b.ToTable("options", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_places");

                    b.ToTable("places", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)")
                        .HasColumnName("description");

                    b.Property<bool?>("HasOther")
                        .HasColumnType("boolean")
                        .HasColumnName("has_other");

                    b.Property<int?>("SectionId")
                        .HasColumnType("integer")
                        .HasColumnName("section_id");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.HasIndex("SectionId")
                        .HasDatabaseName("ix_questions_section_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_questions_type_id");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.QuestionsType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_questions_types");

                    b.ToTable("questions_types", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer")
                        .HasColumnName("survey_id");

                    b.HasKey("Id")
                        .HasName("pk_sections");

                    b.HasIndex("SurveyId")
                        .HasDatabaseName("ix_sections_survey_id");

                    b.ToTable("sections", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("instructions");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("place");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<int?>("SurveysStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("surveys_status_id");

                    b.Property<int>("Target")
                        .HasColumnType("integer")
                        .HasColumnName("target");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_surveys");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_surveys_status_id");

                    b.HasIndex("SurveysStatusId")
                        .HasDatabaseName("ix_surveys_surveys_status_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_surveys_user_id");

                    b.ToTable("surveys", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.SurveysStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_surveys_statuses");

                    b.ToTable("surveys_statuses", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_users_role_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.Answer", b =>
                {
                    b.HasOne("DataLayer.Models.Place", "PlaceNavigation")
                        .WithMany("Answers")
                        .HasForeignKey("PlaceId")
                        .HasConstraintName("fk_answers_places_place_id");

                    b.HasOne("DataLayer.Models.Survey", "Survey")
                        .WithMany("Answers")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answers_surveys_survey_id");

                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_answers_users_user_id");

                    b.Navigation("PlaceNavigation");

                    b.Navigation("Survey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.AnswerOption", b =>
                {
                    b.HasOne("DataLayer.Models.Answer", "Answer")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answer_options_answers_answer_id");

                    b.HasOne("DataLayer.Models.Option", "Option")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answer_options_options_option_id");

                    b.Navigation("Answer");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("DataLayer.Models.Option", b =>
                {
                    b.HasOne("DataLayer.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_options_questions_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DataLayer.Models.Question", b =>
                {
                    b.HasOne("DataLayer.Models.Section", "Section")
                        .WithMany("Questions")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("fk_questions_sections_section_id");

                    b.HasOne("DataLayer.Models.QuestionsType", "Type")
                        .WithMany("Questions")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_questions_questions_types_type_id");

                    b.Navigation("Section");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DataLayer.Models.Section", b =>
                {
                    b.HasOne("DataLayer.Models.Survey", "Survey")
                        .WithMany("Sections")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sections_surveys_survey_id");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("DataLayer.Models.Survey", b =>
                {
                    b.HasOne("DataLayer.Models.SurveysStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_surveys_surveys_statuses_status_id");

                    b.HasOne("DataLayer.Models.SurveysStatus", null)
                        .WithMany("Surveys")
                        .HasForeignKey("SurveysStatusId")
                        .HasConstraintName("fk_surveys_surveys_statuses_surveys_status_id");

                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany("Surveys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_surveys_users_user_id");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.HasOne("DataLayer.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataLayer.Models.Answer", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("DataLayer.Models.Option", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("DataLayer.Models.Place", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("DataLayer.Models.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("DataLayer.Models.QuestionsType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("DataLayer.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataLayer.Models.Section", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("DataLayer.Models.Survey", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("DataLayer.Models.SurveysStatus", b =>
                {
                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Surveys");
                });
#pragma warning restore 612, 618
        }
    }
}
